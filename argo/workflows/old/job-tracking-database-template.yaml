apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: job-tracking-database-workflow-template
  namespace: argo-workflows
spec: 

  retryStrategy:
    retryPolicy: "Always"
    limit: "2"
  
  securityContext:
    runAsNonRoot: true

  templates:
  - name: job-tracking-database-template
    inputs:
      parameters:
        - name: T1w_sessions
        - name: Status
        
    # In theory, it should be possible to replace all this with expr code in the fastsurfer container args. In theory...
    script:
      image: public.ecr.aws/docker/library/python:3-slim-bullseye
      imagePullPolicy: IfNotPresent
      resources:
        requests:
          ephemeral-storage: 50M
      volumeMounts:
        # PersistentVolumeClaim reference
      - name: "sub-{{=lower(workflow.parameters.ndaGUID)}}"
        # Path inside the container where volume will be mounted
        mountPath: /opt/freesurfer/subjects
        # Sub-path inside the referenced volume (instead of its root) to be mounted
        subPath: opt/freesurfer/subjects
      command: [python]
      source: |
        import pymysql
        import sys
        import boto3
        import os

        ENDPOINT="mysqldb.123456789012.us-east-1.rds.amazonaws.com"
        PORT="3306"
        USER="jdrussell3"
        REGION="us-east-2"
        DBNAME="cloudpipe-jobtracking"

        TABLE_NAME="jobtracking"
        os.environ['LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN'] = '1'

        #gets the credentials from .aws/credentials
        session = boto3.Session(profile_name='default')
        client = session.client('rds')

        token = client.generate_db_auth_token(DBHostname=ENDPOINT, Port=PORT, DBUsername=USER, Region=REGION)

        try:
          conn =  pymysql.connect(auth_plugin_map={'mysql_clear_password':None},host=ENDPOINT, user=USER, password=token, port=PORT, database=DBNAME, ssl_ca='SSLCERTIFICATE', ssl_verify_identity=True, ssl_verify_cert=True)
          cur = conn.cursor()

          create_table_query = f"""
          CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
            SUBJECT VARCHAR(19) PRIMARY KEY,
            SESSION VARCHAR(23),
            Status VARCHAR(255),
            Error TEXT
          );
          """
          cur.execute(create_table_query)

          add_record_query = f"""
          IF NOT EXISTS(Select SUBJECT from {TABLE_NAME} where SUBJECT='{{workflows.parameters.subjid}}')
          BEGIN
            INSERT INTO {TABLE_NAME}
            VALUES ('{{workflows.parameters.subjid}}', '***session', '***status', '***error')
          END
          ELSE
          BEGIN
            UPDATE {TABLE_NAME}
            SET Status='***status'
            WHERE SUBJSESID='***subjsesid'
          END

        except Exception, Error as e:
          print("Database connection failed due to {}".format(e))


        
        finally:
          if cursor:
            cursor.close()
          if connection:
            connection.close()
        
        
                


  # NOTE: The code in long_prepare_template.sh will automagically handle timepoints with only baseline data
  - name: fastsurfer-template-creation-template
    inputs:
      parameters:
        - name: fastsurfer-command-string

      artifacts:
      - name: fslicense
        path: '/opt/freesurfer/.license'
        s3:
          key: 'config/fslicense'

      - name: fsaverage
        path: '/opt/freesurfer/subjects/fsaverage'
        s3:
          key: 'config/fsaverage/'

      - name: T1w_Y0
        path: /home/nonroot/{{workflow.parameters.subjID}}/ses-baselineYear1Arm1/anat/{{workflow.parameters.subjID}}_ses-baselineYear1Arm1_run-01_T1w.nii
        s3:
          key: 'inputs/{{workflow.parameters.subjID}}/ses-baselineYear1Arm1/anat/{{workflow.parameters.subjID}}_ses-baselineYear1Arm1_run-01_T1w.nii'

      - name: T1w_Y2
        path: /home/nonroot/{{workflow.parameters.subjID}}/ses-2YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-2YearFollowUpYArm1_run-01_T1w.nii
        optional: true
        s3:
          key: 'inputs/{{workflow.parameters.subjID}}/ses-2YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-2YearFollowUpYArm1_run-01_T1w.nii'

      - name: T1w_Y4
        path: /home/nonroot/{{workflow.parameters.subjID}}/ses-4YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-4YearFollowUpYArm1_run-01_T1w.nii
        optional: true
        s3:
          key: 'inputs/{{workflow.parameters.subjID}}/ses-4YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-4YearFollowUpYArm1_run-01_T1w.nii'

      - name: T1w_Y6
        path: /home/nonroot/{{workflow.parameters.subjID}}/ses-6YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-6YearFollowUpYArm1_run-01_T1w.nii
        optional: true
        s3:
          key: 'inputs/{{workflow.parameters.subjID}}/ses-6YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-6YearFollowUpYArm1_run-01_T1w.nii'

      - name: T1w_Y8
        path: /home/nonroot/{{workflow.parameters.subjID}}/ses-8YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-8YearFollowUpYArm1_run-01_T1w.nii
        optional: true
        s3:
          key: 'inputs/{{workflow.parameters.subjID}}/ses-8YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-8YearFollowUpYArm1_run-01_T1w.nii'

      - name: T1w_Y10
        path: /home/nonroot/{{workflow.parameters.subjID}}/ses-10YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-10YearFollowUpYArm1_run-01_T1w.nii
        optional: true
        s3:
          key: 'inputs/{{workflow.parameters.subjID}}/ses-10YearFollowUpYArm1/anat/{{workflow.parameters.subjID}}_ses-10YearFollowUpYArm1_run-01_T1w.nii'

    nodeSelector:
      karpenter.sh/nodepool: al2023-gpu-nodepool

    initContainers:
      - name: clear-is-running
        image: public.ecr.aws/docker/library/alpine:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            ephemeral-storage: 300M
        command: ["find", "/opt/freesurfer/subjects", "-name", "*IsRunning*", "-delete"]
        mirrorVolumeMounts: true
        
    container:
      image: public.ecr.aws/l9e7l1h1/cloudpipe/fastsurfer:latest
      imagePullPolicy: IfNotPresent
      volumeMounts:
        # PersistentVolumeClaim reference
      - name: "sub-{{=lower(workflow.parameters.ndaGUID)}}"
        # Path inside the container where volume will be mounted
        mountPath: /opt/freesurfer/subjects
        # Sub-path inside the referenced volume (instead of its root) to be mounted
        subPath: opt/freesurfer/subjects

      env:
        - name: FS_LICENSE
          value: /opt/freesurfer/.license

      resources:
        requests:
          memory: 16G
          cpu: '4'
        limits:
          nvidia.com/gpu: '1'
          
      command: [bash, -c]
      args: ["/fastsurfer/recon_surf/long_prepare_template.sh {{inputs.parameters.fastsurfer-command-string}}"]


