apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cloudpipe-long-master-workflow-template
  generateName: brave-abcd-pipeline- # string prepended to the workflow ID
  namespace: argo-workflows
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::026415314835:role/argo-workflows-s3access
    workflows.argoproj.io/description: "{{workflow.parameters.subjID}}"
spec:
  archiveLogs: true
  serviceAccountName: argo-workflows-s3access
  entrypoint: master-pipeline-dag
  # artifactGC:
  #     strategy: OnWorkflowDeletion

  # MUST include a global security context to ensure artifacts are passed with the same (accessible) 
  # permissions or else some tasks may not be able to access passed artifacts (this took too long to figure out)
  # see: https://github.com/argoproj/argo-workflows/issues/9651 (can also set 'mode: 755' e.g., to define permissions)
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true

  workflowMetadata:
    annotations:
      workflows.argoproj.io/title: "{{workflow.parameters.subjID}}"
    labels:
      workflows.argoproj.io/title: "{{workflow.parameters.subjID}}"

  # Arguments passed at the command line ('-p arg=')
  arguments:
    parameters:
      # Workflow parameters to be passed in as arguments to the workflow (e.g., from the command line)
      # Signified by the lack of value
      - name: ndaGUID
      - name: miNDARpkgID
      # Creating new workflow parameters by modifying existing ones (using expr language)
      - name: subjID
        # Prepending the NDA GUID with 'sub-' per BIDS format
        value: sub-{{workflow.parameters.ndaGUID}}

  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

  templates:
  - name: master-pipeline-dag
    parallelism: 2
    dag:
      # Providing each task in the DAG, its dependencies, and any output artifacts to be passed
      tasks:
        # What we'll call this task within this document
        - name: subject-data-inventory-dagtask
          templateRef:
            name: subject-data-inventory-workflow-template
            template: subject-data-inventory-template

        - name: single-timepoint-pipeline-dagtask
          when: "(1 == {{=len(split(tasks['subject-data-inventory-dagtask'].outputs.result, \" \"))}})"
          template: single-timepoint-pipeline-dag-template
          dependencies:
            - subject-data-inventory-dagtask

        - name: longitudinal-pipeline-dagtask
          when: "(1 < {{=len(split(tasks['subject-data-inventory-dagtask'].outputs.result, \" \"))}})"
          template: longitudinal-pipeline-dag-template
          dependencies:
            - subject-data-inventory-dagtask
          arguments:
            parameters:
              - name: t1w_sessions
                value: '{{tasks.subject-data-inventory-dagtask.outputs.result}}'

  - name: single-timepoint-pipeline-dag-template
    dag:
      tasks:
        - name: fastsurfer-segmentation-dagtask
          templateRef:
            name: fastsurfer-segmentation-workflow-template
            template: fastsurfer-segmentation-template

        - name: fastsurfer-parcellation-dagtask
          templateRef:
            name: fastsurfer-parcellation-workflow-template
            template: fastsurfer-parcellation-template
          arguments:
            artifacts:
              - name: segmentation-output
                from: '{{tasks.fastsurfer-segmentation-dagtask.outputs.artifacts.segmentation-output}}'
          dependencies:
            - fastsurfer-segmentation-dagtask

  - name: longitudinal-pipeline-dag-template
    parallelism: 2
    inputs:
      parameters:
        - name: t1w_sessions
    dag:
      tasks:
        - name: fastsurfer-base-template-creation-dagtask
          templateRef:
            name: fastsurfer-base-template-creation-workflow-template
            template: fastsurfer-base-template-creation-dag-template
          arguments:
            parameters:
              - name: t1w_sessions
                value: "{{inputs.parameters.t1w_sessions}}"

        - name: fastsurfer-base-segmentation-dagtask
          templateRef:
            name: fastsurfer-base-segmentation-workflow-template
            template: fastsurfer-base-segmentation-template
          dependencies:
            - fastsurfer-base-template-creation-dagtask

        - name: fastsurfer-base-surface-dagtask
          templateRef: 
            name: fastsurfer-base-surface-workflow-template
            template: fastsurfer-base-surface-template
          dependencies:
            - fastsurfer-base-segmentation-dagtask

        - name: fastsurfer-long-segmentation-dagtask
          templateRef: 
            name: fastsurfer-long-segmentation-workflow-template
            template: fastsurfer-long-segmentation-template
          dependencies:
            - fastsurfer-base-surface-dagtask

        - name: fastsurfer-long-surface-dagtask
          templateRef:
            name: fastsurfer-long-surface-workflow-template
            template: fastsurfer-long-surface-dag-template
          dependencies:
            - fastsurfer-long-segmentation-dagtask
          arguments:
            parameters:
              - name: t1w_sessions
                value: "{{inputs.parameters.t1w_sessions}}"