apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: fastsurfer-long-segmentation-workflow-template
  namespace: argo-workflows
spec:

  retryStrategy:
    retryPolicy: "Always"
    limit: "2"

  securityContext:
    runAsNonRoot: true

  templates:
  - name: fastsurfer-long-segmentation-steps-template
    inputs:
      parameters:
        - name: T1w_sessions

    steps:
    - - name: createargstring
        template: createargstring-template
        arguments:
          parameters:
            - name: T1w_sessions
              value: '{{inputs.parameters.T1w_sessions}}'
    
    - - name: fastsurfer-long-segmentation-step
        template: fastsurfer-long-segmentation-template
        arguments:
          parameters:
            - name: argstring
              value: '{{steps.createargstring.outputs.result}}'

  # Per lines 311:313 of long_fastsurfer.sh, need to wrap sessions in quotes and append each incoming session with "=from-base" 
  - name: createargstring-template
    inputs:
      parameters:
        - name: T1w_sessions
    # In theory, it should be possible to replace all this with expr code in the fastsurfer container args. In theory...
    script:
      image: public.ecr.aws/docker/library/python:3-slim-bullseye
      imagePullPolicy: IfNotPresent
      resources:
        requests:
          ephemeral-storage: 50M
      command: [python]
      source: |
        import os
        T1w_sessions = {{inputs.parameters.T1w_sessions}}
        subjid = "{{workflow.parameters.subjID}}"
        subjidwtmpl = str(subjid + "_template")
        # Appending '=from-base' to all sessions except the last
        T1w_sessions = [session + "=from-base" for session in T1w_sessions]
        argstring = ' '.join(['--subjects', ' '.join([*T1w_sessions]), '--sd', '/opt/freesurfer/subjects', '--seg_only', '--edits', '--fsaparc', '--long', f'{subjidwtmpl}', '--threads', '8'])
        print(argstring)

  - name: fastsurfer-long-segmentation-template
  
    inputs:
      parameters:
        - name: argstring

    nodeSelector:
      karpenter.sh/nodepool: al2023-gpu-nodepool

    initContainers:
      - name: clear-is-running
        image: public.ecr.aws/docker/library/alpine:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            ephemeral-storage: 300M
        command: ["find", "/opt/freesurfer/subjects", "-name", "*IsRunning*", "-delete"]
        mirrorVolumeMounts: true

    container:
      imagePullPolicy: IfNotPresent
      # deepmi/fastsurfer does NOT explicitly add a nonroot user to the image - which seems to be a requirement for containerd
      # we'll just create a variant that does add the nonroot user (and their user directory)
      image: public.ecr.aws/l9e7l1h1/cloudpipe/fastsurfer:latest

      volumeMounts:
        # PersistentVolumeClaim reference
      - name: "sub-{{=lower(workflow.parameters.ndaGUID)}}"
        # Path inside the container where volume will be mounted
        mountPath: /opt/freesurfer/subjects
        # Sub-path inside the referenced volume (instead of its root) to be mounted
        subPath: opt/freesurfer/subjects

      resources:
        requests:
          memory: 8G
          cpu: '4'
        limits:
          nvidia.com/gpu: '1'

      command: [bash, -c]
      args: ["/fastsurfer/brun_fastsurfer.sh {{inputs.parameters.argstring}}"]
