apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: fastsurfer-long-parcellation-workflow-template
  namespace: argo-workflows
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true

  templates:
  - name: fastsurfer-long-parcellation-steps-template
    inputs:
      parameters:
      - name: T1w_sessions

    steps:
    - - name: createargstring
        template: createargstring-template
        arguments:
          parameters:
            - name: T1w_sessions
              value: '{{inputs.parameters.T1w_sessions}}'

    - - name: fastsurfer-long-parcellation-step
        template: fastsurfer-long-parcellation-template
        arguments:
          parameters:
            - name: argstring
              value: '{{steps.createargstring.outputs.result}}'

  # Per lines 311:313 of long_fastsurfer.sh, need to wrap sessions in quotes and append each incoming session with "=from-base" 
  - name: createargstring-template
    inputs:
      parameters:
        - name: T1w_sessions

    script:
      image: python:3.12.9-slim-bookworm
      command: [python]
      source: |
        import os
        T1w_sessions = {{inputs.parameters.T1w_sessions}}
        subjid = "{{workflow.parameters.subjID}}"
        subjidwtmpl = str(subjid + "_template")
        # Appending '=from-base' to all sessions except the last
        T1w_sessions = [session + "=from-base" for session in T1w_sessions]
        argstring = ' '.join(['--subjects', ' '.join([*T1w_sessions]), '--sd', '/opt/freesurfer/subjects', '--surf_only', '--fsaparc', '--3T', '--long', f'{subjidwtmpl}', '--parallel', '2'])
        print(argstring)

  - name: fastsurfer-long-parcellation-template
    inputs:
      parameters:
        - name: argstring

      artifacts:
      - name: fslicense
        path: '/opt/freesurfer/.license'
        s3:
          key: 'config/fslicense'

    outputs:
      artifacts:
      - name: long-template-complete
        path: '/opt/freesurfer/subjects/{{workflow.parameters.subjID}}_template'
        s3:
          key: 'derivatives/fastsurfer/{{workflow.parameters.subjID}}/{{workflow.parameters.subjID}}-long-template-complete.tar.gz'
      
      - name: ses-baselineYear1Arm1-templated
        path: '/opt/freesurfer/subjects/ses-baselineYear1Arm1'
        s3:
          key: 'derivatives/fastsurfer/{{workflow.parameters.subjID}}/ses-baselineYear1Arm1_templated.tar.gz'
      
      - name: ses-2YearFollowUpYArm1-templated
        path: '/opt/freesurfer/subjects/ses-2YearFollowUpYArm1'
        s3:
          key: 'derivatives/fastsurfer/{{workflow.parameters.subjID}}/ses-2YearFollowUpYArm1_templated.tar.gz'

    nodeSelector:
      karpenter.sh/nodepool: al2023-intel-heavy-nodepool

    container:
      imagePullPolicy: IfNotPresent
      # deepmi/fastsurfer does NOT explicitly add a nonroot user to the image - which seems to be a requirement for containerd
      # we'll just create a variant that does add the nonroot user (and their user directory)
      image: public.ecr.aws/l9e7l1h1/cloudpipe/fastsurfer:latest

      volumeMounts:
      - name: workdir
        mountPath: /opt/freesurfer/subjects

      env:
        - name: FS_LICENSE
          value: /opt/freesurfer/.license

      resources:
        requests:
          memory: 16Gi
          cpu: 8000m

      command: [bash, -c]
      args: ["/fastsurfer/brun_fastsurfer.sh {{inputs.parameters.argstring}}"]