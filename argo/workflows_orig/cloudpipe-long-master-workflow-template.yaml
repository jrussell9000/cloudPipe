apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cloudpipe-long-master-workflow-template
  namespace: argo-workflows
  # TO DO: Verify that this annotation is necessary
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::575108944090:role/argo-workflows-s3access

spec:
  # Adding subject ID as a label to both the individual workflows and their respective pods
  # TO DO: Get rid of ndaGUID and replace it with subjectID
  workflowMetadata:
    annotations:
      workflows.argoproj.io/title: "sub-{{workflow.parameters.ndaGUID}}"
    labelsFrom:
      subjectID: 
        expression: workflow.parameters.ndaGUID
  podMetadata:
    labels:
      subjectid: "sub-{{workflow.parameters.ndaGUID}}"

  # TO DO: Can this be the controller IRSA (with bucket permissions)?
  serviceAccountName: argo-workflows-s3access

  # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
  ttlStrategy:
    secondsAfterCompletion: 60 


  # When to clean up persistent volume claims
  volumeClaimGC: 
    strategy: OnWorkflowCompletion

  # When should an individual workflow step be retried and how many times max?
  retryStrategy:
    retryPolicy: OnError
    limit: '1'

  # MUST include a global security context to ensure artifacts are passed with the same (accessible) 
  # permissions or else some tasks may not be able to access passed artifacts (this took too long to figure out)
  # see: https://github.com/argoproj/argo-workflows/issues/9651 (can also set 'mode: 755' e.g., to define permissions)
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  # Where (in templates) to start?
  entrypoint: master-pipeline-dag

  # Arguments passed at the command line ('-p arg=')
  arguments:
    parameters:
      # Workflow parameters to be passed in as arguments to the workflow 
      # (e.g., from the command line) as signified by the lack of value
      - name: ndaGUID
      # - name: miNDARpkgID
      # Creating new workflow parameters by modifying existing ones (using expr language)
      - name: subjID
        # Prepending the NDA GUID with 'sub-' per BIDS format
        value: sub-{{workflow.parameters.ndaGUID}}

  templates:
  # This is the master DAG for the entire pipeline
  - name: master-pipeline-dag
    # Limit to the number of pods (job steps) that can run at any one time
    parallelism: 2
    dag:
      # Providing each task in the DAG, its dependencies, and any output artifacts to be passed
      tasks:
        # What we'll call this task within this document
        - name: subject-data-inventory-dagtask
          # Reference to a template contained in a separate file
          templateRef:
            # The metadata name of the workflow template
            name: subject-data-inventory-workflow-template
            # The 'entrypoint' task template within the workflow template
            template: subject-data-inventory-template

        # Longitudinal timepoint anatomical processing pipeline
        - name: anatomical-processing-pipeline-dagtask
          # Referencing an in-line DAG template provided below
          template: anatomical-processing-pipeline-dag-template
          depends: "subject-data-inventory-dagtask.Succeeded"
          arguments:
            parameters:
              # Pass in the output from the subject-data-inventory-dagtask as a parameter named T1w_sessions
              - name: T1w_sessions
                value: '{{tasks.subject-data-inventory-dagtask.outputs.result}}'

        # For each session with a T1, pull all the fmri scans and run them through fmriprep
        # NOTE: This should be adjusted to pull only sessions with completed fastsurfer runs
        - name: functional-processing-pipeline-dagtask
          templateRef:
            name: fmriprep-workflow-template
            template: fmriprep-loop-template
          arguments:
            parameters:
              - name: T1w_sessions
                value: '{{tasks.subject-data-inventory-dagtask.outputs.result}}'
          depends: "anatomical-processing-pipeline-dagtask.Succeeded "

###################################
#----- In-line DAG Templates -----#
###################################

  - name: anatomical-processing-pipeline-dag-template
    # Maximum number of steps in this workflow that can run concurrently
    # i.e., maximum width of the DAG in nodes
    parallelism: 2
    inputs:
      parameters:
        # Pull in in the T1w_sessions parameter passed above
        - name: T1w_sessions
    dag:
      tasks:
        # Create a within-subject template and register all the scans to it
        - name: fastsurfer-template-creation-dagtask
          templateRef:
            name: fastsurfer-template-creation-workflow-template
            template: fastsurfer-template-creation-dag-template
          arguments:
            parameters:
              # Pull in the T1w_sessions parameter passed in to the in-line DAG template (above)
              - name: T1w_sessions
                value: "{{inputs.parameters.T1w_sessions}}"

        # Segment the within-subject template
        - name: fastsurfer-template-segmentation-dagtask
          templateRef:
            name: fastsurfer-template-segmentation-workflow-template
            template: fastsurfer-template-segmentation-template
          # Depends on creation of the within-subject template
          dependencies:
            - fastsurfer-template-creation-dagtask

        # Parcellate the within-subject template
        - name: fastsurfer-template-parcellation-steps
          templateRef: 
            name: fastsurfer-template-parcellation-workflow-template
            template: fastsurfer-template-parcellation-steps-template
          # Template segmentation is a pre-requisite for parcellation
          dependencies:
            - fastsurfer-template-segmentation-dagtask

        # Segment each of the newly-registered session scans
        - name: fastsurfer-long-segmentation-steps
          templateRef: 
            name: fastsurfer-long-segmentation-workflow-template
            template: fastsurfer-long-segmentation-steps-template
          dependencies:
            - fastsurfer-template-parcellation-steps
          arguments:
            parameters:
              - name: T1w_sessions
                value: "{{inputs.parameters.T1w_sessions}}"

        # Parcellate each of the registered session scans
        - name: fastsurfer-long-parcellation-steps
          templateRef:
            name: fastsurfer-long-parcellation-workflow-template
            template: fastsurfer-long-parcellation-steps-template
          # Segmentation is a prerequisite for parcellation
          dependencies:
            - fastsurfer-long-segmentation-steps
          arguments:
            parameters:
              - name: T1w_sessions
                value: "{{inputs.parameters.T1w_sessions}}"


