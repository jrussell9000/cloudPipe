# see: https://github.com/argoproj/argo-helm/blob/main/charts/argo-workflows/values.yaml


## Custom resource configuration
crds:
  # -- Install and upgrade CRDs
  install: true
  # -- Keep CRDs on chart uninstall
  keep: false
  # -- Annotations to be added to all CRDs
  annotations: {}

workflow:
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Service account which is used to run workflows
    name: ${ argo_workflows_runner_IRSA_name }
    # -- Annotations applied to created service account
    annotations:
      eks.amazonaws.com/role-arn: ${ argo_workflows_runner_IRSA_arn }
  rbac:
    # -- Adds Role and RoleBinding for the above specified service account to be able to run workflows.
    # A Role and Rolebinding pair is also created for each namespace in controller.workflowNamespaces (see below)
    create: true

controller:
  configMap:
    # -- Create a ConfigMap for the controller
    create: true
    # -- ConfigMap name
    name: "argo-workflows-controller-configmap"
    # -- ConfigMap annotations
    annotations: {}

  metricsConfig:
    # -- Enables prometheus metrics server
    enabled: true

  # -- enable Workflow Archive to store the status of workflows. Postgres and MySQL (>= 5.7.8) are available.
  ## Ref: https://argo-workflows.readthedocs.io/en/stable/workflow-archive/
  persistence:
    # -- Save the entire workflow into etcd and DB
    nodeStatusOffload: true
    # -- Enable archiving of old workflows
    archive: true
    mysql:
      host: ${ argo_workflows_db_host }
      port: ${ argo_workflows_db_port }
      database: ${ argo_workflows_db_name }
      tableName: ${ argo_workflows_db_table_name}
      userNameSecret:
        name: ${ argo_workflows_db_secret_name }
        key: username
      passwordSecret:
        name: ${ argo_workflows_db_secret_name }
        key: password

  # -- Default values that will apply to all Workflows from this controller, unless overridden on the Workflow-level.
  # Only valid for 2.7+
  ## See more: https://argo-workflows.readthedocs.io/en/stable/default-workflow-specs/
  workflowDefaults: {}
  #   spec:
  #     ttlStrategy:
  #       secondsAfterCompletion: 86400
  #     # Ref: https://argo-workflows.readthedocs.io/en/stable/artifact-repository-ref/
  #     artifactRepositoryRef:
  #       configMap: my-artifact-repository # default is "artifact-repositories"
  #       key: v2-s3-artifact-repository # default can be set by the `workflows.argoproj.io/default-artifact-repository` annotation in config map.

  # telemetryConfig controls the path and port for prometheus telemetry. Telemetry is enabled and emitted in the same endpoint
  # as metrics by default, but can be overridden using this config.
  # telemetryConfig:
  #   # -- Enables prometheus telemetry server
  #   enabled: true

  # serviceMonitor:
  #   # -- Enable a prometheus ServiceMonitor
  #   enabled: true
  #   # -- Prometheus ServiceMonitor namespace
  #   namespace: "argo-workflows"

  serviceAccount:
    # -- Create a service account for the controller
    create: true
    # -- Service account name
    name: ${ argo_workflows_controller_IRSA_name }
    # -- Annotations applied to created service account
    annotations:
      eks.amazonaws.com/role-arn: ${ argo_workflows_controller_IRSA_arn }

  rbac:
    # -- Adds Role and RoleBinding for the controller.
    create: true

  # -- Workflow controller name string
  name: "workflow-controller"

  # -- Specify all namespaces where this workflow controller instance will manage
  # workflows. This controls where the service account and RBAC resources will
  # be created. Only valid when singleNamespace is false.
  workflowNamespaces:
    - ${ argo_workflows_namespace }

  # extraEnv:
  #   - name: OTEL_EXPORTER_OTLP_ENDPOINT
  #     value: "http://localhost:4317"
    # - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
    #   value: 


  tolerations: 
  - key: "CriticalAddonsOnly"
    value: "true"
    effect: "NoSchedule"

server:
  # -- Deploy the Argo Server
  enabled: true
  # -- Service type for server pods
  serviceType: LoadBalancer

  serviceAccount:
    # -- Create a service account for the server
    create: true
    # -- Service account name
    name: ${ argo_workflows_server_IRSA_name }
    annotations:
      # -- Annotations applied to created service account
      eks.amazonaws.com/role-arn: ${ argo_workflows_server_IRSA_arn }
    rbac:
      create: true

  ## Argo Server Horizontal Pod Autoscaler
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo Server
    enabled: true
    minReplicas: 1

  extraArgs:
    - "--auth-mode=server"

  # -- A list of supported authentication modes. Available values are `server`, `client`, or `sso`. If you provide sso, please configure `.Values.server.sso` as well.
  ## Ref: https://argo-workflows.readthedocs.io/en/stable/argo-server-auth-mode/
  authModes: ['server']

  # -- [Tolerations] for use with node taints
  tolerations:
  - key: "CriticalAddonsOnly"
    value: "true"
    effect: "NoSchedule"

## Artifact Repository Configuration
# -- Use static credentials for S3 (eg. when not using AWS IRSA)
useStaticCredentials: false
artifactRepository:
  # -- Archive the main container logs as an artifact
  archiveLogs: true
  # -- Store artifact in a S3-compliant object store
  # @default -- See [values.yaml]
  s3:
    bucket: ${ argo_workflows_bucket }
    # keyFormat: fmriresults01/abcd-mproc-release5
    endpoint: s3.amazonaws.com
    region: ${ region }
    useSDKcreds: true
    encryptionOptions:
      enableEncryption: true

useDefaultArtifactRepo: true

