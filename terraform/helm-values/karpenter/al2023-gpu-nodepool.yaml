apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: al2023-gpu-nodepool
spec:
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 30s
  template:
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: al2023-nodeclass
      # Avoid possible race between the scheduler and the CSINode
      # see https://karpenter.sh/docs/troubleshooting/#pods-were-scheduled-due-to-a-race-condition-in-kubernetes
      startupTaints:
        - key: efs.csi.aws.com/agent-not-ready
          effect: NoExecute
      # A budget of zero nodes will prevent any of those nodes from being considered for voluntary disruption.
      # see https://karpenter.sh/docs/concepts/disruption/#example-disable-disruption-on-a-nodepool
      disruption:
        budgets:
          - nodes: "0"
      requirements:
      # see: https://karpenter.sh/docs/concepts/scheduling/#well-known-labels
      # AMD64
      - key: "kubernetes.io/arch"
        operator: In
        values: ["amd64"]
      # Runs linux
      - key: "kubernetes.io/os"
        operator: In
        values: ["linux"]
      # Spot instances
      - key: "karpenter.sh/capacity-type"
        operator: In
        values: ["spot"]
      # Instance generation
      # Karpenter recommends this setting: https://karpenter.sh/docs/concepts/nodepools/#min-values
      # - key: "karpenter.k8s.aws/instance-generation"
      #   operator: Gt
      #   values: ["2"]
      # # Instance category (first letter)
      # - key: "node.kubernetes.io/instance-category"
      #   operator: In
      #   values: ["g"]
      # Instance memory (in mebibytes)
      - key: "karpenter.k8s.aws/instance-memory"
        operator: Gt
        values: ["8191"]
      - key: "karpenter.k8s.aws/instance-family"
        operator: In
        values: ["g4dn", "g5", "g6", "g6e", "gr"]
      # # Instance type
      # - key: "node.kubernetes.io/instance-type"
      #   operator: In
      #   values: ["g6.2xlarge", "g5.xlarge", "g4dn.xlarge"]