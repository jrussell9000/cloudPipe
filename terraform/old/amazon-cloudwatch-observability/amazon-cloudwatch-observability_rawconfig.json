{
  "replicaCount": 1,
  "nameOverride": "",
  "imagePullSecrets": [],
  "clusterName": null,
  "region": null,
  "nodeLabelKey": "node.kubernetes.io/instance-type",
  "gpuInstances": [
    "p2.xlarge",
    "p2.8xlarge",
    "p2.16xlarge",
    "p3.2xlarge",
    "p3.8xlarge",
    "p3.16xlarge",
    "p3dn.24xlarge",
    "p4d.24xlarge",
    "p4de.24xlarge",
    "p5.48xlarge",
    "g3s.xlarge",
    "g3.4xlarge",
    "g3.8xlarge",
    "g3.16xlarge",
    "g4dn.xlarge",
    "g4dn.2xlarge",
    "g4dn.4xlarge",
    "g4dn.8xlarge",
    "g4dn.16xlarge",
    "g4dn.12xlarge",
    "g4dn.metal",
    "g4ad.xlarge",
    "g4ad.2xlarge",
    "g4ad.4xlarge",
    "g4ad.8xlarge",
    "g4ad.16xlarge",
    "g5.xlarge",
    "g5.2xlarge",
    "g5.4xlarge",
    "g5.8xlarge",
    "g5.16xlarge",
    "g5.12xlarge",
    "g5.24xlarge",
    "g5.48xlarge",
    "g5g.xlarge",
    "g5g.2xlarge",
    "g5g.4xlarge",
    "g5g.8xlarge",
    "g5g.16xlarge",
    "g5g.metal",
    "ml.p5.48xlarge",
    "ml.p4d.24xlarge",
    "ml.p4de.24xlarge",
    "ml.p3.2xlarge",
    "ml.p3.8xlarge",
    "ml.p3.16xlarge",
    "ml.p3dn.24xlarge",
    "ml.p2.xlarge",
    "ml.p2.8xlarge",
    "ml.p2.16xlarge",
    "ml.g3s.xlarge",
    "ml.g3.4xlarge",
    "ml.g3.8xlarge",
    "ml.g3.16xlarge",
    "ml.g4dn.xlarge",
    "ml.g4dn.2xlarge",
    "ml.g4dn.4xlarge",
    "ml.g4dn.8xlarge",
    "ml.g4dn.16xlarge",
    "ml.g4dn.12xlarge",
    "ml.g4dn.metal",
    "ml.g4ad.xlarge",
    "ml.g4ad.2xlarge",
    "ml.g4ad.4xlarge",
    "ml.g4ad.8xlarge",
    "ml.g4ad.16xlarge",
    "ml.g5.xlarge",
    "ml.g5.2xlarge",
    "ml.g5.4xlarge",
    "ml.g5.8xlarge",
    "ml.g5.16xlarge",
    "ml.g5.12xlarge",
    "ml.g5.24xlarge",
    "ml.g5.48xlarge",
    "ml.g5g.xlarge",
    "ml.g5g.2xlarge",
    "ml.g5g.4xlarge",
    "ml.g5g.8xlarge",
    "ml.g5g.16xlarge",
    "ml.g5g.metal"
  ],
  "neuronInstances": [
    "trn1.2xlarge",
    "trn1.32xlarge",
    "trn1n.32xlarge",
    "inf1.xlarge",
    "inf1.2xlarge",
    "inf1.6xlarge",
    "inf1.24xlarge",
    "inf2.xlarge",
    "inf2.8xlarge",
    "inf2.24xlarge",
    "inf2.48xlarge",
    "ml.trn1.2xlarge",
    "ml.trn1.32xlarge",
    "ml.trn1n.32xlarge",
    "ml.inf1.xlarge",
    "ml.inf1.2xlarge",
    "ml.inf1.6xlarge",
    "ml.inf1.24xlarge",
    "ml.inf2.xlarge",
    "ml.inf2.8xlarge",
    "ml.inf2.24xlarge",
    "ml.inf2.48xlarge"
  ],
  "tolerations": [
    {
      "operator": "Exists"
    }
  ],
  "containerLogs": {
    "enabled": true,
    "fluentBit": {
      "image": {
        "repository": "aws-for-fluent-bit",
        "tag": "2.32.0.20240304",
        "tagWindows": "2.31.12-windowsservercore",
        "repositoryDomainMap": {
          "public": "public.ecr.aws/aws-observability",
          "cn-north-1": "128054284489.dkr.ecr.cn-north-1.amazonaws.com.cn",
          "cn-northwest-1": "128054284489.dkr.ecr.cn-northwest-1.amazonaws.com.cn",
          "us-gov-east-1": "161423150738.dkr.ecr.us-gov-east-1.amazonaws.com",
          "us-gov-west-1": "161423150738.dkr.ecr.us-gov-west-1.amazonaws.com"
        }
      },
      "config": {
        "service": "[SERVICE]\n  Flush                     5\n  Grace                     30\n  Log_Level                 error\n  Daemon                    off\n  Parsers_File              parsers.conf\n  storage.path              /var/fluent-bit/state/flb-storage/\n  storage.sync              normal\n  storage.checksum          off\n  storage.backlog.mem_limit 5M\n",
        "customParsers": "[PARSER]\n  Name                syslog\n  Format              regex\n  Regex               ^(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\\/\\.\\-]*)(?:\\[(?<pid>[0-9]+)\\])?(?:[^\\:]*\\:)? *(?<message>.*)$\n  Time_Key            time\n  Time_Format         %b %d %H:%M:%S\n\n[PARSER]\n  Name                container_firstline\n  Format              regex\n  Regex               (?<log>(?<=\"log\":\")\\S(?!\\.).*?)(?<!\\\\)\".*(?<stream>(?<=\"stream\":\").*?)\".*(?<time>\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\n  Time_Key            time\n  Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\n\n[PARSER]\n  Name                cwagent_firstline\n  Format              regex\n  Regex               (?<log>(?<=\"log\":\")\\d{4}[\\/-]\\d{1,2}[\\/-]\\d{1,2}[ T]\\d{2}:\\d{2}:\\d{2}(?!\\.).*?)(?<!\\\\)\".*(?<stream>(?<=\"stream\":\").*?)\".*(?<time>\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\n  Time_Key            time\n  Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\n",
        "extraFiles": {
          "application-log.conf": "[INPUT]\n  Name                tail\n  Tag                 application.*\n  Exclude_Path        /var/log/containers/cloudwatch-agent*, /var/log/containers/fluent-bit*, /var/log/containers/aws-node*, /var/log/containers/kube-proxy*\n  Path                /var/log/containers/*.log\n  multiline.parser    docker, cri\n  DB                  /var/fluent-bit/state/flb_container.db\n  Mem_Buf_Limit       50MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Rotate_Wait         30\n  storage.type        filesystem\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 application.*\n  Path                /var/log/containers/fluent-bit*\n  multiline.parser    docker, cri\n  DB                  /var/fluent-bit/state/flb_log.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 application.*\n  Path                /var/log/containers/cloudwatch-agent*\n  multiline.parser    docker, cri\n  DB                  /var/fluent-bit/state/flb_cwagent.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[FILTER]\n  Name                kubernetes\n  Match               application.*\n  Kube_URL            https://kubernetes.default.svc:443\n  Kube_Tag_Prefix     application.var.log.containers.\n  Merge_Log           On\n  Merge_Log_Key       log_processed\n  K8S-Logging.Parser  On\n  K8S-Logging.Exclude Off\n  Labels              Off\n  Annotations         Off\n  Use_Kubelet         On\n  Kubelet_Port        10250\n  Buffer_Size         0\n\n[OUTPUT]\n  Name                cloudwatch_logs\n  Match               application.*\n  region              ${AWS_REGION}\n  log_group_name      /aws/containerinsights/${CLUSTER_NAME}/application\n  log_stream_prefix   ${HOST_NAME}-\n  auto_create_group   true\n  extra_user_agent    container-insights\n",
          "dataplane-log.conf": "[INPUT]\n  Name                systemd\n  Tag                 dataplane.systemd.*\n  Systemd_Filter      _SYSTEMD_UNIT=docker.service\n  Systemd_Filter      _SYSTEMD_UNIT=containerd.service\n  Systemd_Filter      _SYSTEMD_UNIT=kubelet.service\n  DB                  /var/fluent-bit/state/systemd.db\n  Path                /var/log/journal\n  Read_From_Tail      ${READ_FROM_TAIL}\n\n[INPUT]\n  Name                tail\n  Tag                 dataplane.tail.*\n  Path                /var/log/containers/aws-node*, /var/log/containers/kube-proxy*\n  multiline.parser    docker, cri\n  DB                  /var/fluent-bit/state/flb_dataplane_tail.db\n  Mem_Buf_Limit       50MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Rotate_Wait         30\n  storage.type        filesystem\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[FILTER]\n  Name                modify\n  Match               dataplane.systemd.*\n  Rename              _HOSTNAME                   hostname\n  Rename              _SYSTEMD_UNIT               systemd_unit\n  Rename              MESSAGE                     message\n  Remove_regex        ^((?!hostname|systemd_unit|message).)*$\n\n[FILTER]\n  Name                aws\n  Match               dataplane.*\n  imds_version        v2\n\n[OUTPUT]\n  Name                cloudwatch_logs\n  Match               dataplane.*\n  region              ${AWS_REGION}\n  log_group_name      /aws/containerinsights/${CLUSTER_NAME}/dataplane\n  log_stream_prefix   ${HOST_NAME}-\n  auto_create_group   true\n  extra_user_agent    container-insights\n",
          "host-log.conf": "[INPUT]\n  Name                tail\n  Tag                 host.dmesg\n  Path                /var/log/dmesg\n  Key                 message\n  DB                  /var/fluent-bit/state/flb_dmesg.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 host.messages\n  Path                /var/log/messages\n  Parser              syslog\n  DB                  /var/fluent-bit/state/flb_messages.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 host.secure\n  Path                /var/log/secure\n  Parser              syslog\n  DB                  /var/fluent-bit/state/flb_secure.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[FILTER]\n  Name                aws\n  Match               host.*\n  imds_version        v2\n\n[OUTPUT]\n  Name                cloudwatch_logs\n  Match               host.*\n  region              ${AWS_REGION}\n  log_group_name      /aws/containerinsights/${CLUSTER_NAME}/host\n  log_stream_prefix   ${HOST_NAME}.\n  auto_create_group   true\n  extra_user_agent    container-insights\n"
        }
      },
      "configWindows": {
        "service": "[ SERVICE ]\n  Flush                       5\n  Log_Level                   error\n  Daemon                      off\n  net.dns.resolver            LEGACY\n  Parsers_File                parsers.conf\n  \n  @INCLUDE application-log.conf\n  @INCLUDE dataplane-log.conf\n  @INCLUDE host-log.conf\n",
        "customParsers": "[PARSER]\n  Name                docker\n  Format              json\n  Time_Key            time\n  Time_Format         %b %d %H:%M:%S\n\n[PARSER]\n  Name                container_firstline\n  Format              regex\n  Regex               (?<log>(?<=\"log\":\")\\S(?!\\.).*?)(?<!\\\\)\".*(?<stream>(?<=\"stream\":\").*?)\".*(?<time>\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\n  Time_Key            time\n  Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\n\n[PARSER]\n  Name                dataplane_firstline\n  Format              regex\n  Regex               (?<log>(?<=\"log\":\")\\S(?!\\.).*?)(?<!\\\\)\".*(?<stream>(?<=\"stream\":\").*?)\".*(?<time>\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\n  Time_Key            time\n  Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\n",
        "extraFiles": {
          "application-log.conf": "[INPUT]\n  Name                tail\n  Tag                 application.*\n  Exclude_Path        C:\\\\var\\\\log\\\\containers\\\\fluent-bit*, C:\\\\var\\\\log\\\\containers\\\\cloudwatch-agent*\n  Path                C:\\\\var\\\\log\\\\containers\\\\*.log\n  Parser              docker\n  DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_container.db\n  Mem_Buf_Limit       50MB\n  Skip_Long_Lines     On\n  Rotate_Wait         30\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 application.*\n  Path                C:\\\\var\\\\log\\\\containers\\\\fluent-bit*\n  Parser              docker\n  DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_log.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Rotate_Wait         30\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 application.*\n  Path                C:\\\\var\\\\log\\\\containers\\\\cloudwatch-agent*\n  Parser              docker\n  DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_cwagent.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Rotate_Wait         30\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[OUTPUT]\n  Name                cloudwatch_logs\n  Match               application.*\n  region              ${AWS_REGION}\n  log_group_name      /aws/containerinsights/${CLUSTER_NAME}/application\n  log_stream_prefix   ${HOST_NAME}-\n  auto_create_group   true\n  extra_user_agent    container-insights\n",
          "dataplane-log.conf": "[INPUT]\n  Name                tail\n  Tag                 dataplane.tail.*\n  Path                C:\\\\ProgramData\\\\containerd\\\\root\\\\*.log, C:\\\\ProgramData\\\\Amazon\\\\EKS\\\\logs\\\\*.log\n  Parser              dataplane_firstline\n  DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_dataplane_tail.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Rotate_Wait         30\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[INPUT]\n  Name                tail\n  Tag                 dataplane.tail.C.ProgramData.Amazon.EKS.logs.vpc-bridge\n  Path                C:\\\\ProgramData\\\\Amazon\\\\EKS\\\\logs\\\\*.log.*\n  Path_Key            file_name\n  Parser              dataplane_firstline\n  DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_dataplane_cni_tail.db\n  Mem_Buf_Limit       5MB\n  Skip_Long_Lines     On\n  Rotate_Wait         30\n  Refresh_Interval    10\n  Read_from_Head      ${READ_FROM_HEAD}\n\n[FILTER]\n  Name                aws\n  Match               dataplane.*\n  imds_version        v2\n\n[OUTPUT]\n  Name                cloudwatch_logs\n  Match               dataplane.*\n  region              ${AWS_REGION}\n  log_group_name      /aws/containerinsights/${CLUSTER_NAME}/dataplane\n  log_stream_prefix   ${HOST_NAME}-\n  auto_create_group   true\n  extra_user_agent    container-insights\n",
          "host-log.conf": "[INPUT]\n  Name                winlog\n  Channels            EKS, System\n  DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_system_winlog.db\n  Interval_Sec        60\n\n[FILTER]\n  Name                aws\n  Match               winlog.*\n  imds_version        v2\n\n[OUTPUT]\n  Name                cloudwatch_logs\n  Match               winlog.*\n  region              ${AWS_REGION}\n  log_group_name      /aws/containerinsights/${CLUSTER_NAME}/host\n  log_stream_prefix   ${HOST_NAME}.\n  auto_create_group   true\n  extra_user_agent    container-insights\n"
        }
      }
    }
  },
  "manager": {
    "name": null,
    "image": {
      "repository": "cloudwatch-agent-operator",
      "tag": "1.4.0",
      "repositoryDomainMap": {
        "public": "public.ecr.aws/cloudwatch-agent",
        "cn-north-1": "934860584483.dkr.ecr.cn-north-1.amazonaws.com.cn",
        "cn-northwest-1": "934860584483.dkr.ecr.cn-northwest-1.amazonaws.com.cn",
        "us-gov-east-1": "743662458514.dkr.ecr.us-gov-east-1.amazonaws.com",
        "us-gov-west-1": "743662458514.dkr.ecr.us-gov-west-1.amazonaws.com"
      }
    },
    "autoInstrumentationImage": {
      "java": {
        "repositoryDomain": "public.ecr.aws/aws-observability",
        "repository": "adot-autoinstrumentation-java",
        "tag": "v1.32.2"
      },
      "python": {
        "repositoryDomain": "public.ecr.aws/aws-observability",
        "repository": "adot-autoinstrumentation-python",
        "tag": "v0.2.0"
      }
    },
    "autoAnnotateAutoInstrumentation": {
      "java": {
        "namespaces": [],
        "deployments": [],
        "daemonsets": [],
        "statefulsets": []
      },
      "python": {
        "namespaces": [],
        "deployments": [],
        "daemonsets": [],
        "statefulsets": []
      }
    },
    "ports": {
      "containerPort": 9443,
      "metricsPort": 8080,
      "webhookPort": 9443,
      "healthzPort": 8081
    },
    "resources": {
      "requests": {
        "cpu": "100m",
        "memory": "64Mi"
      }
    },
    "env": {
      "ENABLE_WEBHOOKS": "true"
    },
    "serviceAccount": {
      "create": true,
      "annotations": {}
    },
    "podAnnotations": {},
    "podLabels": {},
    "service": {
      "name": null
    }
  },
  "admissionWebhooks": {
    "create": true,
    "failurePolicy": "Ignore",
    "secretName": "",
    "pods": {
      "failurePolicy": "Ignore"
    },
    "namePrefix": "",
    "timeoutSeconds": 10,
    "namespaceSelector": {},
    "objectSelector": {},
    "autoGenerateCert": {
      "enabled": true,
      "expiryDays": 3650
    },
    "certManager": {
      "enabled": false,
      "issuerRef": {},
      "certificateAnnotations": {},
      "issuerAnnotations": {}
    },
    "secretAnnotations": {},
    "secretLabels": {}
  },
  "agent": {
    "name": null,
    "image": {
      "repository": "cloudwatch-agent",
      "tag": "1.300040.0b650",
      "repositoryDomainMap": {
        "public": "public.ecr.aws/cloudwatch-agent",
        "cn-north-1": "934860584483.dkr.ecr.cn-north-1.amazonaws.com.cn",
        "cn-northwest-1": "934860584483.dkr.ecr.cn-northwest-1.amazonaws.com.cn",
        "us-gov-east-1": "743662458514.dkr.ecr.us-gov-east-1.amazonaws.com",
        "us-gov-west-1": "743662458514.dkr.ecr.us-gov-west-1.amazonaws.com"
      }
    },
    "enabled": true,
    "autoGenerateCert": {
      "enabled": true,
      "expiryDays": 3650
    },
    "certManager": {
      "enabled": false,
      "issuerRef": {},
      "certificateAnnotations": {},
      "issuerAnnotations": {}
    },
    "serviceAccount": {
      "name": null
    },
    "config": null,
    "defaultConfig": {
      "logs": {
        "metrics_collected": {
          "kubernetes": {
            "enhanced_container_insights": true
          },
          "application_signals": {}
        }
      },
      "traces": {
        "traces_collected": {
          "application_signals": {}
        }
      }
    },
    "windowsDefaultConfig": {
      "logs": {
        "metrics_collected": {
          "kubernetes": {
            "enhanced_container_insights": true
          }
        }
      }
    }
  },
  "dcgmExporter": {
    "name": null,
    "image": {
      "repository": "dcgm-exporter",
      "tag": "3.3.3-3.3.1-ubuntu22.04",
      "repositoryDomainMap": {
        "public": "nvcr.io/nvidia/k8s",
        "cn-north-1": "934860584483.dkr.ecr.cn-north-1.amazonaws.com.cn",
        "cn-northwest-1": "934860584483.dkr.ecr.cn-northwest-1.amazonaws.com.cn",
        "us-gov-east-1": "743662458514.dkr.ecr.us-gov-east-1.amazonaws.com",
        "us-gov-west-1": "743662458514.dkr.ecr.us-gov-west-1.amazonaws.com"
      }
    },
    "configmap": "dcgm-exporter-config-map",
    "arguments": [
      "--web-config-file=/etc/dcgm-exporter/web-config.yaml"
    ],
    "service": {
      "enable": true,
      "type": "ClusterIP",
      "port": 9400,
      "address": ":9400"
    },
    "kubeletPath": "/var/lib/kubelet/pod-resources",
    "serviceAccount": {
      "name": null
    }
  },
  "neuronMonitor": {
    "name": null,
    "image": {
      "repository": "neuron-monitor",
      "tag": "1.0.1",
      "repositoryDomainMap": {
        "public": "public.ecr.aws/neuron"
      }
    },
    "configmap": "neuron-monitor-config-map",
    "service": {
      "enable": true,
      "type": "ClusterIP",
      "port": 8000,
      "address": ":8000"
    },
    "securityContext": {
      "runAsNonRoot": false,
      "runAsUser": 0,
      "capabilities": {
        "add": [
          "SYS_ADMIN"
        ]
      }
    },
    "serviceAccount": {
      "name": null
    }
  }
}